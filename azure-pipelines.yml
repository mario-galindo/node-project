trigger:
- '*'

variables:
  buildConfiguration: 'Release'
  webRepository: 'app/web'
  tag: '$(Build.BuildId)'

stages:
- stage: 'Testing'
  displayName: 'App Build and Test'
  jobs:  
  - job: 'Testing'
    displayName: 'Build job'
    pool:
      vmImage: 'ubuntu-20.04'
    steps:
    - task: NodeTool@0
      inputs:
        versionSpec: '16.x'
      displayName: 'Install Node.js'
    
    - task: Npm@1
      displayName: 'Install NPM Packages'
      inputs:
        command: install

    - task: Npm@1
      displayName: NPM Run Test
      inputs:
        command: 'custom'
        workingDir: '$(Build.SourcesDirectory)'
        customCommand: 'run test:ci'

    - task: PublishTestResults@2
      displayName: 'Publish Test Results to Pipelines'
      condition: succeededOrFailed()
      inputs:
        testResultsFiles: '$(Build.SourcesDirectory)/junit.xml'
        failTaskOnFailedTests: false

    - script: |
        npm run coverage
      displayName: 'npm output coverage'

    - task: PublishCodeCoverageResults@1
      inputs:
        codeCoverageTool: Cobertura
        summaryFileLocation: $(System.DefaultWorkingDirectory)/coverage/cobertura-coverage.xml

- stage: 'Build'
  displayName: 'Docker Build and Push'
  jobs:  
  - job: 'Build'
    displayName: 'Docker job'
    pool:
      vmImage: 'ubuntu-20.04'
    steps:
    - task: Docker@2
      displayName: 'Build and push the image to container registry'
      inputs:
        command: buildAndPush
        buildContext: $(Build.Repository.LocalPath)
        repository: $(webRepository)
        dockerfile: '$(Build.SourcesDirectory)/Dockerfile'
        containerRegistry: 'Container Registry Connection'
        tags: |
          $(tag)
          latest
    - publish: '$(Build.SourcesDirectory)/kubernetes'
      artifact: manifests

#- stage: 'Deploy'
#  displayName: 'Deploy the containers'
#  dependsOn: Build
#  jobs:
#  - deployment: Deploy
#    displayName: Deploy
#    pool:
#      vmImage: 'ubuntu-20.04'
#    environment: 'spike.default'
#    variables:
#    - group: Release
#    strategy:
#      runOnce:
#        deploy:
#          steps:
#          - download: current
#            artifact: manifests
#          - task: KubernetesManifest@0
#            displayName: Deploy to Kubernetes cluster
#            inputs:
#              action: deploy
#              kubernetesServiceConnection: 'Kubernetes Cluster Connection'
#              namespace: 'default'
#              manifests: |
#                $(Pipeline.Workspace)/manifests/deployment.yaml
#              containers: |
#                $(RegistryName)/$(webRepository):$(tag)